name: "Terraform action"

on:
  push:
    branches: [main]
  pull_request:

permissions:
  id-token: write          # required for AWS OIDC
  contents: read           # required for checkout
  pull-requests: write     # to comment the plan on PRs

env:
  TF_LOG: INFO
  TF_IN_AUTOMATION: "true"
  TF_INPUT: "false"
  AWS_REGION: ${{ secrets.AWS_REGION }}

jobs:
  deploy:
    runs-on: ubuntu-latest
    defaults:
      run:
        shell: bash
        working-directory: .

    steps:
      - name: Git checkout
        uses: actions/checkout@v4

      - name: Configure AWS credentials (OIDC)
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.AWS_ROLE }}     # full role ARN
          aws-region: ${{ env.AWS_REGION }}
          role-session-name: GitHub-OIDC-TERRAFORM

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: 1.2.5   # keep your pinned version

      - name: Terraform fmt
        id: fmt
        run: terraform fmt -check
        continue-on-error: true

      # LOCAL BACKEND (no S3 state yet) ‚Äî this will create the bucket
      - name: Terraform Init
        id: init
        run: terraform init -input=false

      - name: Terraform Validate
        id: validate
        run: terraform validate -no-color

      - name: Terraform Plan
        id: plan
        run: terraform plan -no-color -out=tfplan
        if: github.event_name == 'pull_request'
        continue-on-error: true

      - name: Comment plan on PR
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v7
        env:
          PLAN: "terraform\n${{ steps.plan.outputs.stdout }}"
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const output = `#### Terraform Format üñå \`${{ steps.fmt.outcome }}\`
            #### Init ‚öôÔ∏è \`${{ steps.init.outcome }}\`
            #### Validate ü§ñ \`${{ steps.validate.outcome }}\`
            #### Plan üìñ \`${{ steps.plan.outcome || 'skipped' }}\`

            <details><summary>Show Plan</summary>
            \`\`\`
            ${process.env.PLAN || 'No plan output'}
            \`\`\`
            </details>`;

            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: output
            });

      - name: Terraform Plan Status
        if: github.event_name == 'pull_request' && steps.plan.outcome == 'failure'
        run: exit 1

      - name: Terraform Apply (main)
        if: github.event_name == 'push' && github.ref == 'refs/heads/main'
        run: terraform apply -auto-approve -input=false
